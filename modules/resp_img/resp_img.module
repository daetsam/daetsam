<?php

define('RESP_IMG_CLASS', 'resp-img-picture');
define('RESP_IMG_SEPARATOR', '__');
define('RESP_IMG_STYLE_PREFIX', 'resp__img__');

/**
 * Implements hook_permission().
 */
function resp_img_permission() {
  return array(
    'administer responsive images and styles' => array(
      'title' => t('Administer Responsive Images and Styles'),
      'description' => t('Administer responsive images and styles'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function resp_img_menu() {
  $items = array();

  // @todo: link to all breakpoints and a list of all groups
  // cf theme settings page
  $items['admin/config/media/resp_img'] = array(
    'title' => 'Responsive images and styles',
    'description' => 'Manage Responsive Images and Styles',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('resp_img_admin_breakpoints'),
    'access arguments' => array('administer responsive images and styles'),
    'file' => 'resp_img.admin.inc',
  );

  $items['admin/config/media/resp_img/create_style'] = array(
    'title' => 'Add responsive style',
    'description' => 'Add a responsive image style',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('resp_img_add_style_form'),
    'access arguments' => array('administer responsive images and styles'),
    'file' => 'resp_img.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 30,
  );

  $items['admin/config/media/resp_img/groups'] = array(
    'title' => 'Groups',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 10,
  );

  $items['admin/config/media/resp_img/groups/global'] = array(
    'title' => 'Map breakpoints and image styles',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );
  $items['admin/config/media/resp_img/groups/import'] = array(
    'title' => 'Import mappings',
    'page arguments' => array('resp_img_admin_import_form'),
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer responsive images and styles'),
    'file' => 'resp_img.admin.inc',
    'weight' => 999,
  );

  $breakpoint_groups = breakpoints_breakpoint_group_load_all();
  foreach ($breakpoint_groups as $breakpoint_group_name => $breakpoint_group) {
    if (!empty($breakpoint_group->machine_name)) {
      $items['admin/config/media/resp_img/groups/' . $breakpoint_group->machine_name] = array(
        'title' => $breakpoint_group->name,
        'page arguments' => array('resp_img_admin_breakpoints', $breakpoint_group->machine_name),
        'type' => MENU_LOCAL_TASK,
        'access arguments' => array('administer responsive images and styles'),
        'file' => 'resp_img.admin.inc',
        'weight' => 15,
      );
      $items['admin/config/media/resp_img/groups/' . $breakpoint_group->machine_name . '/export'] = array(
        'title' => t('Export !name mappings', array('!name' => $breakpoint_group->name)),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('resp_img_admin_export_form', 'mappings.' . $breakpoint_group->machine_name),
        'type' => MENU_LOCAL_ACTION,
        'access arguments' => array('administer responsive images and styles','mappings.' . $breakpoint_group->machine_name),
        'access callback' => 'resp_img_mappings_export_access',
        'file' => 'resp_img.admin.inc',
        'weight' => 15,
      );
    }
  }

  return $items;
}

/**
 * Access callback.
 */
function resp_img_mappings_export_access($perm, $mapping_name) {
  return resp_img_mapping_load($mapping_name) && user_access($perm);
}

/**
 * Load mappings.
 */
function resp_img_mapping_load($name = NULL) {
  ctools_include('export');
  if ($name) {
    $mappings = ctools_export_load_object('resp_img_mapping', 'names', array($name));
    $mapping = isset($mappings[$name]) ? $mappings[$name] : FALSE;
    return $mapping;
  }
  return ctools_export_load_object('resp_img_mapping');
}


/**
 * Save mappings.
 */
function resp_img_mapping_save(&$mapping) {
  ctools_include('export');
  $update = isset($mapping->id) ? array('id') : array();
  return drupal_write_record('resp_img_mapping', $mapping, $update);
}

/**
 * Validate mappings.
 */
function resp_img_mapping_validate($mapping) {
  if (!is_object($mapping)) {
    return FALSE;
  }
  foreach (array('machine_name', 'breakpoint_group', 'mapping') as $property) {
    if (!property_exists($mapping, $property)) {
      return FALSE;
    }
  }
  return TRUE;
}

/**
 * Add javascript for older browser support
 */
function resp_img_add_js() {
  static $added = FALSE;
  if (!$added) {
    $added = TRUE;
    drupal_add_js(drupal_get_path('module', 'resp_img') . '/picturefill/matchmedia.js', array('type' => 'file', 'weight' => -10, 'group' => JS_DEFAULT));
    drupal_add_js(drupal_get_path('module', 'resp_img') . '/picturefill/picturefill.js', array('type' => 'file', 'weight' => -10, 'group' => JS_DEFAULT));
  }
}

/**
 * Implements hook_theme().
 */
function resp_img_theme() {
  return array(
    'picture' => array(
      'variables' => array(
        'style_name' => NULL,
        'path' => NULL,
        'width' => NULL,
        'height' => NULL,
        'alt' => '',
        'title' => NULL,
        'attributes' => array(),
        'breakpoints' => array(),
      ),
    ),
    'picture_formatter' => array(
      'variables' => array(
        'item' => NULL,
        'path' => NULL,
        'image_style' => NULL,
        'breakpoints' => array(),
      ),
    ),
    'colorbox_picture_formatter' => array(
      'variables' => array(
        'item' => NULL,
        'node' => NULL,
        'field' => array(),
        'display_settings' => array(),
        'breakpoints' => array(),
      ),
    ),
    'colorbox_picturefield' => array(
      'variables' => array(
        'image' => array(),
        'path' => NULL,
        'title' => NULL,
        'gid' => NULL,
        'breakpoints' => array(),
      ),
    ),
  );
}

/**
 * Implements hook_preprocess_field().
 */
function resp_img_field_attach_view_alter(&$output, $context) {
  foreach (element_children($output) as $field_name) {
    $element = &$output[$field_name];
    $vars = array();
    if (isset($element['#formatter'])) {
      if ($element['#formatter'] == 'image') {
        $vars['image_style'] = 'image_style';
        $vars['#formatter'] = 'picture';
        $vars['#theme'] = 'picture_formatter';
      }
      elseif ($element['#formatter'] == 'colorbox') {
        $vars['image_style'] = 'colorbox_node_style';
        $vars['#formatter'] = 'picture';
        $vars['#theme'] = 'colorbox_picture_formatter';
      }

      if (!empty($vars)) {
        $instance = field_info_instance($element['#entity_type'], $element['#field_name'], $element['#bundle']);
        if (isset($instance['display'][$context['view_mode']])) {
          $settings = $instance['display'][$context['view_mode']]['settings'];
        }
        else {
          $settings = $instance['display']['default']['settings'];
        }
        $breakpoint_styles = array();
        $first_image_style = '';
        if (strpos($settings[$vars['image_style']], RESP_IMG_STYLE_PREFIX) !== FALSE) {
          $group_name = substr($settings[$vars['image_style']], strlen(RESP_IMG_STYLE_PREFIX));
          if ($mappings = resp_img_mapping_load('mappings.' . $group_name)) {
            foreach ($mappings as $breakpoint_name => $multipliers) {
              if (!empty($multipliers)) {
                foreach ($multipliers as $multiplier => $image_style) {
                  if (!empty($image_style)) {
                    if (empty($first_image_style)) {
                      $first_image_style = $image_style;
                    }
                    if (!isset($breakpoint_styles[$breakpoint_name])) {
                      $breakpoint_styles[$breakpoint_name] = array();
                    }
                    $breakpoint_styles[$breakpoint_name][$multiplier] = $image_style;
                  }
                }
              }
            }
          }
        }

        if (!empty($breakpoint_styles)) {
          // Change the formatter so it uses ours.
          $element['#formatter'] = $vars['#formatter'];

          // Change the formatter on all items as well.
          $num_fields = count($element['#items']);
          for ($delta = 0; $delta < $num_fields; $delta++) {
            $element[$delta]['#theme'] = $vars['#theme'];
            // Change the image style to the first in use.
            $element[$delta]['#image_style'] = $first_image_style;
            $element[$delta]['#breakpoints'] = $breakpoint_styles;
          }
        }
        else {
          watchdog('Responsive images', t('You have to map at least 1 style for %group.', array('%group' => $group_name)));
        }
      }
    }
  }
}

function theme_picture_formatter($variables) {
  if (!isset($variables['breakpoints']) || empty($variables['breakpoints'])) {
    return theme('image_formatter', $variables);
  }

  $item = $variables['item'];

  // Do not output an empty 'title' attribute.
  if (isset($item['title']) && drupal_strlen($item['title']) == 0) {
    unset($item['title']);
  }

  $item['style_name'] = $variables['image_style'];
  $item['breakpoints'] = $variables['breakpoints'];

  if (!isset($item['path']) && isset($variables['uri'])) {
    $item['path'] = $variables['uri'];
  }
  $output = theme('picture', $item);

  if (isset($variables['path']['path'])) {
    $path = $variables['path']['path'];
    $options = isset($variables['path']['options']) ? $variables['path']['options'] : array();
    $options['html'] = TRUE;
    $output = l($output, $path, $options);
  }
  return $output;
}

/**
 * Theme a picture element.
 */
function theme_picture($variables) {
  resp_img_add_js();
  if (!isset($variables['attributes'])) {
    $variables['attributes'] = array();
  }
  if (!isset($variables['attributes']['class'])) {
    $variables['attributes']['class'] = array();
  }
  $variables['attributes']['class'][] = RESP_IMG_CLASS;

  // Make sure that width and height are proper values
  if (isset($variables['width']) && empty($variables['width'])) {
    unset($variables['width']);
    unset($variables['height']);
  }
  elseif (isset($variables['height']) && empty($variables['height'])) {
    unset($variables['width']);
    unset($variables['height']);
  }

  if (!isset($variables['path']) || empty($variables['path'])) {
    $variables['path'] = ($variables['uri']);
  }
  if (!isset($variables['uri']) || empty($variables['uri'])) {
    $variables['uri'] = ($variables['path']);
  }

  $images = array();
  $output = array();

  // Fallback image.
  $img = theme('image_style', $variables);
  $img = str_replace('<img', '', $img);
  $img = str_replace('/>', '', $img);
  $images[] = array(
    'image' => $img,
  );
  // All breakpoints and multipliers.
  foreach ($variables['breakpoints'] as $breakpoint_name => $multipliers) {
    $breakpoint = breakpoints_breakpoint_load_by_fullkey($breakpoint_name);
    if ($breakpoint) {
      $new_images = array();
      foreach ($multipliers as $multiplier => $image_style) {
        $new_image = $variables;
        $new_image['attributes']['class'][] = RESP_IMG_CLASS . '-' . drupal_clean_css_identifier($breakpoint->name);
        $new_image['style_name'] = $image_style;
        $new_image['#multiplier'] = $multiplier;
        $new_images[] = $new_image;
      }
      $img = theme('image_style', $new_images[0]);
      $img = str_replace('<img', '', $img);
      $img = str_replace('/>', '', $img);

      if (count($new_images) == 1) {
        $images[] = array(
          'image' => $img,
          'media' => $breakpoint->breakpoint,
        );
      }
      else {
        $srcset = array();
        foreach ($new_images as $new_image) {
          $srcset[] = image_style_url($new_image['style_name'], $new_image['uri']) . ' ' . $new_image['#multiplier'];
        }
        $img = preg_replace('/src="[^"]*"/', '', $img);
        $images[] = array(
          'srcset' => implode(', ', $srcset),
          'media' => $breakpoint->breakpoint,
          'image' => $img,
        );
      }
    }
  }

  if (!empty($images)) {
    $output[] = '<picture alt="' . check_plain($variables['alt']) . '" title="' . check_plain($variables['title']) . '">';

    // add variants to the output
    foreach ($images as $image) {
      if (isset($image['media']) && !empty($image['media'])) {
        if (!isset($image['srcset'])) {
          $output[] = '<!-- <source media="' . $image['media'] . '" ' . $image['image'] . ' /> -->';
          $output[] = '<source media="' . $image['media'] . '" ' . $image['image'] . ' />';
        }
        else {
          $output[] = '<!-- <source media="' . $image['media'] . '" srcset="' . $image['srcset'] . '" ' . $image['image'] . ' /> -->';
          $output[] = '<source media="' . $image['media'] . '" srcset="' . $image['srcset'] . '" ' . $image['image'] . ' />';
        }
      }
      else {
        $output[] = '<!-- <source ' . $image['image'] . ' /> -->';
        $output[] = '<source ' . $image['image'] . ' />';
      }
    }

    // output the default image as fallback
    // $output .= '<img src="' . image_style_url($variables['style_name'], $variables['uri']) . '" alt="' . check_plain($variables['alt']) . '" />';
    $output[] = '<noscript><img ' . $images[0]['image'] . '/></noscript>';
    $output[] = '</picture>';
    return implode("\n", $output);
  }
}

/**
 * colorbox_picture_formatter similar to colorbox_image_formatter.
 *
 * only differences are:
 *   'breakpoints' => $variables['breakpoints'],
 *   is the last line.
 */
function theme_colorbox_picture_formatter($variables) {
  $item = $variables['item'];
  $node = $variables['node'];
  $field = $variables['field'];
  $settings = $variables['display_settings'];

  $image = array(
    'path' => $item['uri'],
    'alt' => $item['alt'],
    'title' => $item['title'],
    'style_name' => $settings['colorbox_node_style'],
    'breakpoints' => $variables['breakpoints'],
  );

  if (isset($item['width']) && isset($item['height'])) {
    $image['width'] = $item['width'];
    $image['height'] = $item['height'];
  }

  switch ($settings['colorbox_caption']) {
     case 'auto':
      // If the title is empty use alt or the node title in that order.
      if (!empty($image['title'])) {
        $caption = $image['title'];
      }
      elseif (!empty($image['alt'])) {
        $caption = $image['alt'];
      }
      elseif (!empty($node->title)) {
        $caption = $node->title;
      }
      else {
        $caption = '';
      }
      break;
    case 'title':
      $caption = $image['title'];
      break;
    case 'alt':
      $caption = $image['alt'];
      break;
    case 'node_title':
      $caption = $node->title;
      break;
    case 'custom':
      $caption = token_replace($settings['colorbox_caption_custom'], array('node' => $node));
      break;
    default:
      $caption = '';
  }

  // Shorten the caption for the example styles or when caption shortening is active.
  $colorbox_style = variable_get('colorbox_style', 'default');
  $trim_length = variable_get('colorbox_caption_trim_length', 75);
  if (((strpos($colorbox_style, 'colorbox/example') !== FALSE) || variable_get('colorbox_caption_trim', 0)) && (drupal_strlen($caption) > $trim_length)) {
    $caption = drupal_substr($caption, 0, $trim_length - 5) . '...';
  }

  // Build the gallery id.
  $nid = !empty($node->nid) ? $node->nid : 'nid';
  switch ($settings['colorbox_gallery']) {
    case 'post':
      $gallery_id = 'gallery-' . $nid;
      break;
    case 'page':
      $gallery_id = 'gallery-all';
      break;
    case 'field_post':
      $gallery_id = 'gallery-' . $nid . '-' . $field['field_name'];
      break;
    case 'field_page':
      $gallery_id = 'gallery-' . $field['field_name'];
      break;
    case 'custom':
      $gallery_id = $settings['colorbox_gallery_custom'];
      break;
    default:
      $gallery_id = '';
  }

  if ($style_name = $settings['colorbox_image_style']) {
    $path = image_style_url($style_name, $image['path']);
  }
  else {
    $path = file_create_url($image['path']);
  }

  return theme('colorbox_picturefield', array('image' => $image, 'path' => $path, 'title' => $caption, 'gid' => $gallery_id));
}

/**
 * theme_colorbox_picturefield similar to theme_colorbox_imagefield.
 *
 * only difference is: $image = theme('picture', $variables['image']);.
 */
function theme_colorbox_picturefield($variables) {
  $class = array('colorbox');

  if ($variables['image']['style_name'] == 'hide') {
    $image = '';
    $class[] = 'js-hide';
  }
  else if (!empty($variables['image']['style_name'])) {
    $image = theme('picture', $variables['image']);
  }
  else {
    $image = theme('image', $variables['image']);
  }

  $options = array(
    'html' => TRUE,
    'attributes' => array(
      'title' => $variables['title'],
      'class' => implode(' ', $class),
      'rel' => $variables['gid'],
    )
  );

  return l($image, $variables['path'], $options);
}

/**
 * Implements hook_field_formatter_info_alter().
 */
function resp_img_field_formatter_info_alter(&$info) {
  foreach ($info as $formatter_key => &$formatter) {
    if ($formatter_key == 'image') {
      if (!isset($formatter['settings']) || !is_array($formatter['settings'])) {
        $formatter['settings'] = array();
      }
    }
  }
}

/**
 * Implements hook_field_formatter_settings_form_alter().
 */
function resp_img_field_formatter_settings_form_alter(&$settings_form, $context) {
  if (isset($context['field']['type']) && $context['field']['type'] === 'image') {
    $breakpoint_groups = breakpoints_breakpoint_group_load_all();
    if ($breakpoint_groups && !empty($breakpoint_groups)) {
      foreach ($breakpoint_groups as $machine_name => $breakpoint_group) {
        if (isset($settings_form['image_style'])) {
          $settings_form['image_style']['#options'][RESP_IMG_STYLE_PREFIX . $machine_name] = t('!group (Responsive)', array('!group' => $breakpoint_group->name));
        }
        if (isset($settings_form['colorbox_node_style'])) {
          $settings_form['colorbox_node_style']['#options'][RESP_IMG_STYLE_PREFIX . $machine_name] = t('!group (Responsive)', array('!group' => $breakpoint_group->name));
        }
      }
    }
  }
}

/**
 * Implements hook_field_formatter_settings_summary_alter().
 */
function resp_img_field_formatter_settings_summary_alter(&$summary, $context) {
  if (isset($context['field']['type']) && $context['field']['type'] === 'image') {
    $settings = $context['instance']['display'][$context['view_mode']]['settings'];
    if (isset($settings['image_style']) && strpos($settings['image_style'], RESP_IMG_STYLE_PREFIX) !== FALSE) {
      $group_name = substr($settings['image_style'], strlen(RESP_IMG_STYLE_PREFIX));
      $summary = 'Responsive mode activated using ' . $group_name;
    }
    if (isset($settings['colorbox_node_style']) && strpos($settings['colorbox_node_style'], RESP_IMG_STYLE_PREFIX) !== FALSE) {
      $group_name = substr($settings['colorbox_node_style'], strlen(RESP_IMG_STYLE_PREFIX));
      $summary .= '<br />Responsive mode activated using ' . $group_name;
    }
  }
}
